name: CI

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  # # ----------------------- ANDROID -----------------------------
  # build-android:
  #   name: Build android app & release apk
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Step 1: Checkout the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     # Step 2: Set up Node.js environment
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '22'

  #     # Step 3: Install npm dependencies
  #     - name: Install dependencies
  #       run: npm install

  #     # Step 4: Run tests
  #     - name: Run tests
  #       run: npm test

  #     # Step 5: Run linter
  #     - name: Lint
  #       run: npx eslint

  #     # Step 6: Set up JDK 17
  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'adopt'
  #         cache: "gradle"

  #     # Step 7: Validate Gradle wrapper
  #     - name: Validate Gradle wrapper
  #       uses: gradle/wrapper-validation-action@v1

  #     # Step 8: Install Android SDK
  #     - name: Install Android SDK
  #       uses: android-actions/setup-android@v2

  #     # Step 9: Prepare Android App Bundle
  #     - name: Prepare Android App Bundle
  #       run: |
  #         mkdir -p android/app/build/intermediates/assets/release/
  #         npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/build/intermediates/assets/release/index.android.bundle --assets-dest android/app/build/intermediates/res/merged/release

  #     # Step 10: Build Android Release
  #     - name: Build Android Release
  #       run: |
  #         cd android
  #         chmod +x gradlew 
  #         ./gradlew clean
  #         ./gradlew bundleRelease -Pkeystore.password=${{ secrets.KEYSTORE_PASSWORD }}

  #     # Step 11: Upload APK
  #     - name: Upload APK
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: release-apk
  #         path: android/app/build/outputs/apk/release/app-release.apk

      
      

  # ----------------------- IOS -----------------------------
  build-ios:
    runs-on: macos-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm install

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0.0'

      - name: Install Bundler
        run: gem install bundler

      - name: Install CocoaPods
        run: gem install cocoapods

      - name: Install dependencies from Gemfile
        run: bundle install
        working-directory: ios

      - name: Cache Pods
        uses: actions/cache@v4
        id: pods-cache
        with:
          path: ./ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}

      - name: Install Pods
        run: bundle exec pod install --verbose
        working-directory: ios

      - name: Clean workspace
        run: |
          git clean -ffdx
          npm cache clean --force

      - name: Clean Xcode Build
        run: |
          cd ios
          xcodebuild clean -workspace lumen_nextgen_mobile.xcworkspace -scheme lumen_nextgen_mobile

      - name: Set up code signing
        run: |
          security create-keychain -p actions build.keychain
          security import /path/to/certificate.cer -k ~/Library/Keychains/build.keychain -T /usr/bin/codesign
          security import /path/to/key.p12 -k ~/Library/Keychains/build.keychain -P $KEY_PASSWORD -T /usr/bin/codesign
          security list-keychains -d user -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p actions ~/Library/Keychains/build.keychain
          security set-keychain-settings -t 3600 -u ~/Library/Keychains/build.keychain
          echo $CERTIFICATE_PRIVATE_KEY_PWD | security import ./Certs/$CERTIFICATE_NAME.p12 -k ~/Library/Keychains/build.keychain -P $CERTIFICATE_PRIVATE_KEY_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k actions ~/Library/Keychains/build.keychain

      - name: build archive
        run: |
          cd ios
          xcodebuild -workspace lumen_nextgen_mobile.xcworkspace \
          -scheme "lumen_nextgen_mobile" \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/lumen_nextgen_mobile.xcarchive \
          archive

      - name: Export Archive
        run: |
          xcodebuild -exportArchive \
          -archivePath $RUNNER_TEMP/lumen_nextgen_mobile.xcarchive \
          -exportPath $RUNNER_TEMP \
          -exportOptionsPlist ios/exportOptions.plist

      # - name: Build and Test with Fastlane
      #   run: bundle exec fastlane build_and_test
      #   working-directory: ios

      # - name: Build and Test
      #   env:
      #     XCODE_WORKSPACE: ios/lumen_nextgen_mobile.xcworkspace
      #     XCODE_SCHEME: lumen_nextgen_mobile
      #     XCODE_DESTINATION: 'platform=iOS Simulator,OS=14.5,name=iPhone 15'
      #   run: |
      #     set -o pipefail && xcodebuild clean -workspace $XCODE_WORKSPACE -scheme $XCODE_SCHEME -configuration Debug -sdk iphonesimulator | xcpretty
      #     set -o pipefail && xcodebuild build -workspace $XCODE_WORKSPACE -scheme $XCODE_SCHEME -destination "$XCODE_DESTINATION" | xcpretty
      #     set -o pipefail && xcodebuild test -workspace $XCODE_WORKSPACE -scheme $XCODE_SCHEME -destination "$XCODE_DESTINATION" | xcpretty
